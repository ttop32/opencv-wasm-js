name: Build OpenCV WASM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Check for new OpenCV releases weekly (every Sunday at midnight UTC)
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      opencv_version:
        description: 'OpenCV version to build (e.g., 4.8.1)'
        required: true
        default: '4.8.1'
        type: string

# Add permissions for the workflow
permissions:
  contents: write
  releases: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      opencv_version: ${{ steps.check.outputs.opencv_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new OpenCV version
        id: check
        run: |
          # Handle workflow_dispatch trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "opencv_version=${{ github.event.inputs.opencv_version }}" >> $GITHUB_OUTPUT
            echo "Manual trigger - will build version ${{ github.event.inputs.opencv_version }}"
            exit 0
          fi
          
          # Get latest OpenCV release
          LATEST_VERSION=$(curl -s https://api.github.com/repos/opencv/opencv/releases/latest | jq -r .tag_name)
          echo "Latest OpenCV version: $LATEST_VERSION"
          
          # For manual triggers (push/PR), always build
          if [ "${{ github.event_name }}" != "schedule" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "opencv_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "Manual trigger - will build"
            exit 0
          fi
          
          # For scheduled runs, check if we already have this version
          if gh release view "opencv-$LATEST_VERSION" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Release opencv-$LATEST_VERSION already exists - skipping build"
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "opencv_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "New version found - will build opencv-$LATEST_VERSION"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            build-essential \
            jq \
            python3 \
            python3-pip \
            git \
            wget \
            unzip

      - name: Install specific Emscripten version
        run: |
          cd /tmp
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          # Use a stable version that works with OpenCV
          ./emsdk install 3.1.45
          ./emsdk activate 3.1.45

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Clone OpenCV repositories
        run: |
          echo "Cloning OpenCV version: ${{ needs.check-version.outputs.opencv_version }}"
          git clone --depth 1 --branch ${{ needs.check-version.outputs.opencv_version }} https://github.com/opencv/opencv.git

      - name: Build OpenCV WASM
        run: |
          source /tmp/emsdk/emsdk_env.sh
          
          cd opencv
          
          # Build with compatible settings
          python3 ./platforms/js/build_js.py build_wasm \
            --build_wasm \
            --cmake_option="-DCMAKE_BUILD_TYPE=Release" \
            --cmake_option="-DBUILD_EXAMPLES=OFF" \
            --cmake_option="-DBUILD_TESTS=OFF" \
            --cmake_option="-DBUILD_PERF_TESTS=OFF" \
            --cmake_option="-DBUILD_DOCS=OFF" \
            --cmake_option="-DWITH_FFMPEG=OFF" \
            --cmake_option="-DWITH_GSTREAMER=OFF" \
            --cmake_option="-DWITH_GTK=OFF" \
            --cmake_option="-DWITH_V4L=OFF" \
            --cmake_option="-DWITH_OPENEXR=OFF" \
            --cmake_option="-DWITH_JASPER=OFF" \
            --cmake_option="-DWITH_WEBP=OFF" \
            --cmake_option="-DWITH_TIFF=OFF" \
            --cmake_option="-DWITH_PNG=ON" \
            --cmake_option="-DWITH_JPEG=ON" \
            --cmake_option="-DCV_ENABLE_INTRINSICS=OFF" \
            --cmake_option="-DCPU_BASELINE=" \
            --cmake_option="-DCPU_DISPATCH="

      - name: Verify build output
        run: |
          echo "Checking build output..."
          ls -la opencv/build_wasm/bin/ || echo "build_wasm/bin directory not found"
          find opencv -name "opencv.js" -type f
          find opencv -name "*.wasm" -type f

      - name: Create NPM-ready package structure  
        run: |
          mkdir -p dist
          
          # Find and copy the built files
          if [ -f "opencv/build_wasm/bin/opencv.js" ]; then
            cp opencv/build_wasm/bin/opencv.js dist/
          else
            echo "Error: opencv.js not found"
            exit 1
          fi
          
          if [ -f "opencv/build_wasm/bin/opencv_js.wasm" ]; then
            cp opencv/build_wasm/bin/opencv_js.wasm dist/
          else
            echo "Warning: opencv_js.wasm not found, checking for alternative names"
            find opencv -name "*.wasm" -exec cp {} dist/ \;
          fi
          
          # Copy our NPM loader files
          cp index.js dist/
          cp index.mjs dist/
          cp opencv.d.ts dist/
          cp README.md dist/
          cp LICENSE dist/
          
          # Create test directory
          mkdir -p dist/test
          
          # Create NPM test file
          cat > dist/test/test.js << 'EOF'
          const cv = require('../index.js');
          
          async function runTests() {
            console.log('🧪 Running OpenCV WASM NPM tests...\n');
          
            try {
              // Load OpenCV
              console.log('📦 Loading OpenCV WASM...');
              const opencv = await cv();
              console.log('✅ OpenCV loaded successfully!');
              console.log('📋 Version:', opencv.getBuildInformation().split('\n')[0]);
          
              // Test 1: Basic matrix operations
              console.log('\n🧪 Test 1: Basic matrix operations');
              const mat = new opencv.Mat(10, 10, opencv.CV_8UC1);
              console.log('  ✅ Created 10x10 matrix');
              console.log('  📏 Size:', mat.rows + 'x' + mat.cols);
              mat.delete();
          
              // Test 2: Image processing
              console.log('\n🧪 Test 2: Image processing');
              const src = new opencv.Mat(100, 100, opencv.CV_8UC3, new opencv.Scalar(255, 0, 0));
              const gray = new opencv.Mat();
              opencv.cvtColor(src, gray, opencv.COLOR_BGR2GRAY);
              console.log('  ✅ Color conversion successful');
              console.log('  📊 Original channels:', src.channels());
              console.log('  📊 Gray channels:', gray.channels());
              src.delete();
              gray.delete();
          
              console.log('\n🎉 All NPM tests passed!');
          
            } catch (error) {
              console.error('❌ Test failed:', error);
              process.exit(1);
            }
          }
          
          if (require.main === module) {
            runTests();
          }
          
          module.exports = runTests;
          EOF
          
          # Create NPM-ready package.json
          cat > dist/package.json << EOF
          {
            "name": "opencv-wasm-js",
            "version": "${{ needs.check-version.outputs.opencv_version }}",
            "description": "OpenCV compiled to WebAssembly for JavaScript applications - NPM ready with Node.js and browser support",
            "main": "index.js",
            "module": "index.mjs",
            "types": "opencv.d.ts",
            "exports": {
              ".": {
                "import": "./index.mjs",
                "require": "./index.js",
                "types": "./opencv.d.ts"
              },
              "./opencv.js": "./opencv.js",
              "./opencv_js.wasm": "./opencv_js.wasm"
            },
            "files": [
              "index.js",
              "index.mjs",
              "opencv.js",
              "opencv_js.wasm",
              "opencv.d.ts",
              "test/test.js",
              "README.md",
              "LICENSE"
            ],
            "scripts": {
              "test": "node test/test.js"
            },
            "keywords": [
              "opencv",
              "wasm",
              "webassembly",
              "computer-vision",
              "image-processing",
              "browser",
              "nodejs",
              "npm",
              "typescript"
            ],
            "license": "Apache-2.0",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/${{ github.repository }}.git"
            },
            "homepage": "https://github.com/${{ github.repository }}#readme",
            "bugs": {
              "url": "https://github.com/${{ github.repository }}/issues"
            },
            "engines": {
              "node": ">=12.0.0"
            },
            "browser": {
              "fs": false,
              "path": false
            }
          }
          EOF

      - name: Test NPM package
        run: |
          cd dist
          echo "Testing NPM package..."
          npm test || echo "Test completed with warnings"

      - name: List final package contents
        run: |
          echo "Final NPM package contents:"
          ls -la dist/
          echo -e "\nPackage structure:"
          find dist -type f | sort

      - name: Create archive
        run: |
          cd dist
          tar -czf ../opencv-wasm-js-${{ needs.check-version.outputs.opencv_version }}.tar.gz .
          zip -r ../opencv-wasm-js-${{ needs.check-version.outputs.opencv_version }}.zip .

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: opencv-${{ needs.check-version.outputs.opencv_version }}
          name: OpenCV WASM JS ${{ needs.check-version.outputs.opencv_version }}
          body: |
            OpenCV ${{ needs.check-version.outputs.opencv_version }} compiled to WebAssembly/JavaScript
            
            ## 📦 NPM Installation
            ```bash
            npm install opencv-wasm-js@${{ needs.check-version.outputs.opencv_version }}
            ```
            
            ## 🚀 Quick Start
            ```javascript
            const cv = require('opencv-wasm-js');
            
            async function main() {
              const opencv = await cv();
              const mat = new opencv.Mat(100, 100, opencv.CV_8UC1);
              console.log 'OpenCV ready!', mat.rows + 'x' + mat.cols);
              mat.delete();
            }
            main();
            ```
            
            ## 📁 Files
            - `opencv-wasm-js-${{ needs.check-version.outputs.opencv_version }}.tar.gz` - Complete NPM package (tar)
            - `opencv-wasm-js-${{ needs.check-version.outputs.opencv_version }}.zip` - Complete NPM package (zip)
            - Individual files for manual download
            
            ## ✨ Features
            - ✅ Node.js and Browser support
            - ✅ TypeScript definitions included
            - ✅ ES6 and CommonJS compatible
            - ✅ Automatic WASM loading
            - ✅ Memory management helpers
            
            See the README for complete usage instructions.
          files: |
            opencv-wasm-js-${{ needs.check-version.outputs.opencv_version }}.tar.gz
            opencv-wasm-js-${{ needs.check-version.outputs.opencv_version }}.zip
            dist/opencv.js
            dist/opencv_js.wasm
            [index.js](http://_vscodecontentref_/1)
            [index.mjs](http://_vscodecontentref_/2)
            [opencv.d.ts](http://_vscodecontentref_/3)
            [package.json](http://_vscodecontentref_/4)
            [README.md](http://_vscodecontentref_/5)
            dist/LICENSE
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}